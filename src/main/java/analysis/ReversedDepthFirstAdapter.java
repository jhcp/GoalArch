/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPExp().apply(this);
        outStart(node);
    }

    public void inATermExp(ATermExp node)
    {
        defaultIn(node);
    }

    public void outATermExp(ATermExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExp(ATermExp node)
    {
        inATermExp(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExp(node);
    }

    public void inASequenceExp(ASequenceExp node)
    {
        defaultIn(node);
    }

    public void outASequenceExp(ASequenceExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenceExp(ASequenceExp node)
    {
        inASequenceExp(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getWhitespace() != null)
        {
            node.getWhitespace().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outASequenceExp(node);
    }

    public void inAFactorTerm(AFactorTerm node)
    {
        defaultIn(node);
    }

    public void outAFactorTerm(AFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        inAFactorTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorTerm(node);
    }

    public void inAAlternativeTerm(AAlternativeTerm node)
    {
        defaultIn(node);
    }

    public void outAAlternativeTerm(AAlternativeTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAlternativeTerm(AAlternativeTerm node)
    {
        inAAlternativeTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAAlternativeTerm(node);
    }

    public void inAOrthogonalTerm(AOrthogonalTerm node)
    {
        defaultIn(node);
    }

    public void outAOrthogonalTerm(AOrthogonalTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrthogonalTerm(AOrthogonalTerm node)
    {
        inAOrthogonalTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAOrthogonalTerm(node);
    }

    public void inAZeroormoreTerm(AZeroormoreTerm node)
    {
        defaultIn(node);
    }

    public void outAZeroormoreTerm(AZeroormoreTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAZeroormoreTerm(AZeroormoreTerm node)
    {
        inAZeroormoreTerm(node);
        if(node.getTimes() != null)
        {
            node.getTimes().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAZeroormoreTerm(node);
    }

    public void inAOneormoreTerm(AOneormoreTerm node)
    {
        defaultIn(node);
    }

    public void outAOneormoreTerm(AOneormoreTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneormoreTerm(AOneormoreTerm node)
    {
        inAOneormoreTerm(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAOneormoreTerm(node);
    }

    public void inAOptionalTerm(AOptionalTerm node)
    {
        defaultIn(node);
    }

    public void outAOptionalTerm(AOptionalTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOptionalTerm(AOptionalTerm node)
    {
        inAOptionalTerm(node);
        if(node.getQuestionmark() != null)
        {
            node.getQuestionmark().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAOptionalTerm(node);
    }

    public void inAStateFactor(AStateFactor node)
    {
        defaultIn(node);
    }

    public void outAStateFactor(AStateFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStateFactor(AStateFactor node)
    {
        inAStateFactor(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAStateFactor(node);
    }

    public void inANestedFactor(ANestedFactor node)
    {
        defaultIn(node);
    }

    public void outANestedFactor(ANestedFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedFactor(ANestedFactor node)
    {
        inANestedFactor(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        outANestedFactor(node);
    }
}
